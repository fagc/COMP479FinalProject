import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# read in data
df = pd.DataFrame(pd.read_csv("marketing_campaign.csv", delimiter='\t'))

# preprocessing
df = df.drop(['ID', 'Dt_Customer'], axis=1) # drop unnecessary columns
# map characteristic values to integers
df['Education'] = df['Education'].map({'Graduation': 0, 'PhD': 1, '2n Cycle': 2, 'Basic': 3, 'Master': 4})
df['Marital_Status'] = df['Marital_Status'].map({'Married': 0, 'Single': 1, 'Divorced': 2, 'Together': 3, 'Widow': 4})
df.dropna(inplace=True) # drop NaN values

# split dataset
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=1, stratify=y)

# perceptron model algorithm
class Perceptron(object):
    """
    l_rate: learning rate
    epoch: number of epochs
    weight: random weight
    """
    def __init__(self, l_rate=0.1, epoch=100):
        self.l_rate = l_rate
        self.epoch= epoch

    def fit(self, X, y):
        """
        initializes weight, stores errors, updates weight, returns self
        :param X: training vectors
        :param y: target values
        :return: self (object)
        """
        # initialize weight and store random variables in array
        w = np.random.RandomState(1)
        self.w = w.normal(loc=0.0, scale=0.01, size=1+X.shape[1])
        # store errors
        self.errors = []

        # update weights
        for i in range(self.epoch):
            error_count = 0
            for x, target in zip(X, y):
                update = self.l_rate * (target - self.predict(x))
                self.w[0] += update
                self.w[1:] += update * x
                if update != 0:
                    error_count += 1
            self.errors.append(error_count)
        return self

    def heaviside(self, X):
        """Calculate heaviside step function"""
        return np.dot(X, self.w[1:]) + self.w[0]

    def predict(self, X):
        return np.where(self.heaviside(X) >= 0.0, 1, 0)

# scale features
scaler = StandardScaler()
X_train_scale = scaler.fit_transform(X_train)
X_test_scale = scaler.fit_transform(X_test)

# fit perceptron model
ppn = Perceptron()
ppn.fit(X_train_scale, y_train)

y_pred = ppn.predict(X_test_scale)

# print report and accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:")
print(classification_report(y_test, y_pred))

